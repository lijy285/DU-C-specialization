#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include "cards.h"


void assert_card_valid(card_t c) {
  assert(c.value>=2 && c.value <= VALUE_ACE);
  assert(c.suit >= SPADES && c.suit <= CLUBS);

}

const char * ranking_to_string(hand_ranking_t r) {
  switch (r) {
    case STRAIGHT_FLUSH:
      return "STRAIGHT_FLUSH";
    case FOUR_OF_A_KIND:
      return "FOUR_OF_A_KIND";
    case FULL_HOUSE:
      return "FULL_HOUSE";
    case FLUSH:
      return "FLUSH";
    case STRAIGHT:
      return "STRAIGHT";
    case THREE_OF_A_KIND:
      return "THREE_OF_A_KIND";
    case TWO_PAIR:
      return "TWO_PAIR";
    case PAIR:
      return "PAIR";
    case NOTHING:
      return "NOTHING";
    default:
      return "0";
  }
}

char value_letter(card_t c) {
  if (c.value >= 2 && c.value <= 9) {
    return '0' + c.value;
  }
  else if (c.value == 10) {
    return '0';
  }
  else if (c.value == VALUE_JACK) {
    return 'J';
  }
  else if (c.value == VALUE_QUEEN) {
    return 'Q';
  }
  else if (c.value == VALUE_KING) {
    return 'K';
  }
  else if (c.value == VALUE_ACE) {
    return 'A';
  }
  else {
    return '0';
  }
}
char suit_letter(card_t c) {
  switch (c.suit) {
    case SPADES:   return 's';
    case HEARTS:   return 'h';
    case DIAMONDS: return 'd';
    case CLUBS:    return 'c';
    default:       return '0'; // Should not happen if card is valid
  }
}


void print_card(card_t c) {
  printf("%c%cC",value_letter(c), suit_letter(c));
}

card_t card_from_letters(char value_let, char suit_let) {
  card_t temp;
  
  switch (value_let) {
    case '2': temp.value = 2; break;
    case '3': temp.value = 3; break;
    case '4': temp.value = 4; break;
    case '5': temp.value = 5; break;
    case '6': temp.value = 6; break;
    case '7': temp.value = 7; break;
    case '8': temp.value = 8; break;
    case '9': temp.value = 9; break;
    case '0': temp.value = 10; break; // '0' repreten 10
    case 'J': temp.value = VALUE_JACK; break;
    case 'Q': temp.value = VALUE_QUEEN; break;
    case 'K': temp.value = VALUE_KING; break;
    case 'A': temp.value = VALUE_ACE; break;
    default:
      printf("Invalid value letter: %c\n", value_let);
      temp.value = 0; // invalid value
      break;

  }


  switch (suit_let) {
    case 's': temp.suit = SPADES; break;
    case 'h': temp.suit = HEARTS; break;
    case 'd': temp.suit = DIAMONDS; break;
    case 'c': temp.suit = CLUBS; break;
    default:

      printf("Invalid suit letter: %c\n", suit_let);
      temp.suit = NUM_SUITS; // 使用 NUM_SUITS 表示无效
      break;
  }

  return temp;
}

card_t card_from_num(unsigned c){
  card_t temp;
  assert(c>=0 && c<52);
  // 13 for a suit
  temp.suit=c/13;
  temp.value = c%13+2; // start from 2
  return temp;
}



